/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CyBackdrop {
    }
    interface CyButton {
        "color": string;
    }
    interface CyCheckbox {
        "checked": boolean;
        "color": string;
    }
    interface CyContent {
    }
    interface CyHeader {
    }
    interface CyModal {
    }
    interface CyNav {
        "addCom": () => Promise<void>;
        "pop": () => Promise<void>;
    }
    interface CyPage {
    }
    interface CyRefresh {
    }
    interface CyRipple {
        "type": 'unbounded' | 'bounded';
    }
    interface CySpinner {
        "color": string;
    }
    interface CyTime {
        "color": string;
    }
    interface CyToggle {
        "color": string;
    }
    interface NumberInput {
    }
    interface PageHome {
    }
    interface PageOne {
        "comId": string;
    }
    interface PageRoot {
    }
}
declare global {
    interface HTMLCyBackdropElement extends Components.CyBackdrop, HTMLStencilElement {
    }
    var HTMLCyBackdropElement: {
        prototype: HTMLCyBackdropElement;
        new (): HTMLCyBackdropElement;
    };
    interface HTMLCyButtonElement extends Components.CyButton, HTMLStencilElement {
    }
    var HTMLCyButtonElement: {
        prototype: HTMLCyButtonElement;
        new (): HTMLCyButtonElement;
    };
    interface HTMLCyCheckboxElement extends Components.CyCheckbox, HTMLStencilElement {
    }
    var HTMLCyCheckboxElement: {
        prototype: HTMLCyCheckboxElement;
        new (): HTMLCyCheckboxElement;
    };
    interface HTMLCyContentElement extends Components.CyContent, HTMLStencilElement {
    }
    var HTMLCyContentElement: {
        prototype: HTMLCyContentElement;
        new (): HTMLCyContentElement;
    };
    interface HTMLCyHeaderElement extends Components.CyHeader, HTMLStencilElement {
    }
    var HTMLCyHeaderElement: {
        prototype: HTMLCyHeaderElement;
        new (): HTMLCyHeaderElement;
    };
    interface HTMLCyModalElement extends Components.CyModal, HTMLStencilElement {
    }
    var HTMLCyModalElement: {
        prototype: HTMLCyModalElement;
        new (): HTMLCyModalElement;
    };
    interface HTMLCyNavElement extends Components.CyNav, HTMLStencilElement {
    }
    var HTMLCyNavElement: {
        prototype: HTMLCyNavElement;
        new (): HTMLCyNavElement;
    };
    interface HTMLCyPageElement extends Components.CyPage, HTMLStencilElement {
    }
    var HTMLCyPageElement: {
        prototype: HTMLCyPageElement;
        new (): HTMLCyPageElement;
    };
    interface HTMLCyRefreshElement extends Components.CyRefresh, HTMLStencilElement {
    }
    var HTMLCyRefreshElement: {
        prototype: HTMLCyRefreshElement;
        new (): HTMLCyRefreshElement;
    };
    interface HTMLCyRippleElement extends Components.CyRipple, HTMLStencilElement {
    }
    var HTMLCyRippleElement: {
        prototype: HTMLCyRippleElement;
        new (): HTMLCyRippleElement;
    };
    interface HTMLCySpinnerElement extends Components.CySpinner, HTMLStencilElement {
    }
    var HTMLCySpinnerElement: {
        prototype: HTMLCySpinnerElement;
        new (): HTMLCySpinnerElement;
    };
    interface HTMLCyTimeElement extends Components.CyTime, HTMLStencilElement {
    }
    var HTMLCyTimeElement: {
        prototype: HTMLCyTimeElement;
        new (): HTMLCyTimeElement;
    };
    interface HTMLCyToggleElement extends Components.CyToggle, HTMLStencilElement {
    }
    var HTMLCyToggleElement: {
        prototype: HTMLCyToggleElement;
        new (): HTMLCyToggleElement;
    };
    interface HTMLNumberInputElement extends Components.NumberInput, HTMLStencilElement {
    }
    var HTMLNumberInputElement: {
        prototype: HTMLNumberInputElement;
        new (): HTMLNumberInputElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLPageOneElement extends Components.PageOne, HTMLStencilElement {
    }
    var HTMLPageOneElement: {
        prototype: HTMLPageOneElement;
        new (): HTMLPageOneElement;
    };
    interface HTMLPageRootElement extends Components.PageRoot, HTMLStencilElement {
    }
    var HTMLPageRootElement: {
        prototype: HTMLPageRootElement;
        new (): HTMLPageRootElement;
    };
    interface HTMLElementTagNameMap {
        "cy-backdrop": HTMLCyBackdropElement;
        "cy-button": HTMLCyButtonElement;
        "cy-checkbox": HTMLCyCheckboxElement;
        "cy-content": HTMLCyContentElement;
        "cy-header": HTMLCyHeaderElement;
        "cy-modal": HTMLCyModalElement;
        "cy-nav": HTMLCyNavElement;
        "cy-page": HTMLCyPageElement;
        "cy-refresh": HTMLCyRefreshElement;
        "cy-ripple": HTMLCyRippleElement;
        "cy-spinner": HTMLCySpinnerElement;
        "cy-time": HTMLCyTimeElement;
        "cy-toggle": HTMLCyToggleElement;
        "number-input": HTMLNumberInputElement;
        "page-home": HTMLPageHomeElement;
        "page-one": HTMLPageOneElement;
        "page-root": HTMLPageRootElement;
    }
}
declare namespace LocalJSX {
    interface CyBackdrop {
    }
    interface CyButton {
        "color"?: string;
    }
    interface CyCheckbox {
        "checked"?: boolean;
        "color"?: string;
    }
    interface CyContent {
    }
    interface CyHeader {
    }
    interface CyModal {
    }
    interface CyNav {
    }
    interface CyPage {
    }
    interface CyRefresh {
    }
    interface CyRipple {
        "type"?: 'unbounded' | 'bounded';
    }
    interface CySpinner {
        "color"?: string;
    }
    interface CyTime {
        "color"?: string;
    }
    interface CyToggle {
        "color"?: string;
    }
    interface NumberInput {
    }
    interface PageHome {
    }
    interface PageOne {
        "comId"?: string;
    }
    interface PageRoot {
    }
    interface IntrinsicElements {
        "cy-backdrop": CyBackdrop;
        "cy-button": CyButton;
        "cy-checkbox": CyCheckbox;
        "cy-content": CyContent;
        "cy-header": CyHeader;
        "cy-modal": CyModal;
        "cy-nav": CyNav;
        "cy-page": CyPage;
        "cy-refresh": CyRefresh;
        "cy-ripple": CyRipple;
        "cy-spinner": CySpinner;
        "cy-time": CyTime;
        "cy-toggle": CyToggle;
        "number-input": NumberInput;
        "page-home": PageHome;
        "page-one": PageOne;
        "page-root": PageRoot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cy-backdrop": LocalJSX.CyBackdrop & JSXBase.HTMLAttributes<HTMLCyBackdropElement>;
            "cy-button": LocalJSX.CyButton & JSXBase.HTMLAttributes<HTMLCyButtonElement>;
            "cy-checkbox": LocalJSX.CyCheckbox & JSXBase.HTMLAttributes<HTMLCyCheckboxElement>;
            "cy-content": LocalJSX.CyContent & JSXBase.HTMLAttributes<HTMLCyContentElement>;
            "cy-header": LocalJSX.CyHeader & JSXBase.HTMLAttributes<HTMLCyHeaderElement>;
            "cy-modal": LocalJSX.CyModal & JSXBase.HTMLAttributes<HTMLCyModalElement>;
            "cy-nav": LocalJSX.CyNav & JSXBase.HTMLAttributes<HTMLCyNavElement>;
            "cy-page": LocalJSX.CyPage & JSXBase.HTMLAttributes<HTMLCyPageElement>;
            "cy-refresh": LocalJSX.CyRefresh & JSXBase.HTMLAttributes<HTMLCyRefreshElement>;
            "cy-ripple": LocalJSX.CyRipple & JSXBase.HTMLAttributes<HTMLCyRippleElement>;
            "cy-spinner": LocalJSX.CySpinner & JSXBase.HTMLAttributes<HTMLCySpinnerElement>;
            "cy-time": LocalJSX.CyTime & JSXBase.HTMLAttributes<HTMLCyTimeElement>;
            "cy-toggle": LocalJSX.CyToggle & JSXBase.HTMLAttributes<HTMLCyToggleElement>;
            "number-input": LocalJSX.NumberInput & JSXBase.HTMLAttributes<HTMLNumberInputElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
            "page-one": LocalJSX.PageOne & JSXBase.HTMLAttributes<HTMLPageOneElement>;
            "page-root": LocalJSX.PageRoot & JSXBase.HTMLAttributes<HTMLPageRootElement>;
        }
    }
}
